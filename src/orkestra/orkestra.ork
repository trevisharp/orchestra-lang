##########################################################################################################
#######################################  Pre-processing definition  ######################################

processing all:
	int level = 0
	int current = 0
	bool emptyline = true
	char tabulationtype = 'x'

	processing line:
		emptyline = true
		current = 0
		tabulationtype = 'x'

		processing character:
			if character is "#":
				break
			if character not is tab and character not is newline and character not is space:
				emptyline = false
		
		if emptyline:
			discard
		
		processing character:
			if tabulationtype is 'x':
				if character is tab or character is space:
					tabulationtype = character
				else:
					complete
			
			if character not is tabulationtype:
				complete
			
			if character is tab:
				current += 2
			else if character is space:
				current += 1
		
		if current > level + 2:
			throw TabulationError

		if current > level:
			level = current
			prepend STARTBLOCK
		
		while level > current:
			level -= 2
			append ENDBLOCK
		
		append ENDLINE
	append ENDFILE

##########################################################################################################
############################################  Key definition  ############################################

# auto keywords
keyword ENDFILE
keyword ENDLINE
keyword STARTBLOCK
keyword ENDBLOCK

# processing keywords
keyword PROCESSING = /processing/
keyword NEWLINE = /newline/
keyword TAB = /tab/
keyword SPACE = /space/
contextual keyword ALL = /all/
contextual keyword LINE = /line/
contextual keyword CHARACTER = /character/
contextual keyword BREAK = /break/
contextual keyword DISCARD = /discard/
contextual keyword COMPLETE = /complete/
contextual keyword CONTINUE = /continue/
contextual keyword APPEND = /append/
contextual keyword PREPEND = /prepend/
contextual keyword REPLACE = /replace/

# keys keywords
contextual keyword KEY = /key/
contextual keyword KEYWORD = /keyword/
contextual keyword CONTEXTUAL = /contextual/
key EXPRESSION = //.*?//

# rules keywords
contextual keyword RULE = /rule/
keyword START = /start/
contextual keyword IDENTITY = /identity/
keyword INHERITS = /inherits/

# imports keywords
contextual keyword IMPORT = /import/
contextual keyword USING = /using/
contextual keyword INCLUDE = /include/

# data keywords
keyword BRACES = /\{/
keyword BRACES_CLOSE = /\}/
keyword PARENTHESES = /\(/
keyword PARENTHESES_CLOSE = /\)/
keyword BRACKETS = /\[/
keyword BRACKETS_CLOSE = /\]/
keyword OPSUM = /\+/
keyword OPSUBTRACT = /\-/
keyword OPTIMES = /\*/
keyword OPDIVIDE = /\//
keyword OPPOW = /\^/
keyword OPMODULE = /\%/
keyword EQUAL = /\=/
keyword DOUBLEDOT = /\:/
keyword DOT = /\./
keyword COMMA = /,/
keyword IS = /is/
keyword IN = /in/
keyword NOT = /not/
keyword BIGGEREQUAL = />=/
keyword SMALLEREQUAL = /<=/
keyword BIGGER = />/
keyword SMALLER = /</
keyword AND = /and/
keyword OR = /or/
keyword XOR = /xor/
keyword INT = /int/
keyword STRING = /string/
keyword DECIMAL = /decimal/
keyword BOOL = /bool/
keyword CHAR = /char/
keyword ANY = /any/
keyword LIST = /list/
keyword MAP = /map/
keyword TUPLE = /tuple/
key NULLVALUE = /null/
key NEW = /new/

# flow keywords
contextual keyword IF = /if/
contextual keyword ELSE = /else/
contextual keyword FOR = /for/
contextual keyword WHILE = /while/

# value keywords
identity key ID = /[A-Za-z_][A-Za-z_0-9]*/
key STRINGVALUE = /\".*?\/
key INTEGERVALUE = /[+-]?[0-9]+/
key DOUBLEVALUE = /[+-]?[0-9]*"."[0-9]+/
key CHARVALUE = /\'.\'/
key BOOLVALUE = /[true|false]/

# functions keywords
contextual keyword FUNCTION = /function/
contextual keyword PARSE = /parse/
keyword RETURN = /return/
keyword PRINT = />>/
keyword LAMBDA = /=>/

# errors keywords
contextual keyword THROW = /throw/
contextual keyword ERROR = /error/

# temp keywords
key OVERRIDE = /override/
contextual key ENTITY = /enity/
contextual key PARTIAL = /partial/
contextual key FULL = /full/
key THIS = /this/
key BASE = /base/
contextual key METHOD = /method/
contextual key PROPERTY = /property/
key READONLY = /readonly/
key GET = /get/
key SET = /set/
key VALUE = /value/
contextual key CONSTRUCTOR = /constructor/
contextual key COMPILER = /compiler/
contextual key FOLDER = /folder/
contextual key FILE = /file/
contextual key TITLE = /title/
contextual key CONTENT = /content/
key OPEN = /open/

###########################################################################################################
############################################  Rule definition  ############################################

rule basetype:
	{INT STRING DECIMAL BOOL CHAR ANY}

rule type:
	basetype
	TUPLE type
	LIST type
	MAP basetype type
	TUPLE
	LIST
	MAP basetype
	identity

rule dataCollection:
	{[data COMMA]} data
	
rule listvalue:
	BRACKETS {dataCollection} BRACKETS_CLOSE

rule mapkey:
	data DOUBLEDOT data

rule mapkeycollection:
	mapkey COMMA ENDLINE mapkeycollection
	mapkey COMMA mapkeycollection
	mapkey ENDLINE
	mapkey

rule mapvalue:
	BRACES ENDLINE mapkeycollection BRACES_CLOSE
	BRACES mapkeycollection BRACES_CLOSE
	BRACES ENDLINE BRACES_CLOSE
	BRACES BRACES_CLOSE

rule tuplevalue:
	PARENTHESES {[data]} PARENTHESES_CLOSE

rule collection:
	listvalue
	mapvalue
	tuplevalue

rule condition:
	BOOLVALUE
	data IS data
	data NOT IS data
	data IN data
	data SMALLER data
	data SMALLEREQUAL data
	data BIGGER data
	data BIGGEREQUAL data
	condition AND condition
	condition OR condition
	condition XOR condition
	NOT condition
	PARENTHESES condition PARENTHESES_CLOSE
	
rule functionCall:
	data PARENTHESES {dataCollection} PARENTHESES_CLOSE
	
rule indexer:
	data BRACKETS data BRACKETS_CLOSE

rule data:
	data OPSUM data
	data OPSUBTRACT data
	data OPTIMES data
	data OPDIVIDE data
	data OPPOW data
	data OPMODULE data
	OPSUM data
	OPSUBTRACT data
	INTEGERVALUE
	DOUBLEVALUE
	STRINGVALUE
	CHARVALUE
	EXPRESSION
	NULLVALUE
	condition
	functionCall
	collection
	indexer
	data DOT identity
	NEWLINE
	SPACE
	TAB
	PARENTHESES data PARENTHESES_CLOSE
	identity

rule text:
	[data]

rule if:
	IF condition DOUBLEDOT ENDLINE commandBlock

rule elseif:
	ELSE IF condition DOUBLEDOT ENDLINE commandBlock elseif
	ELSE IF condition DOUBLEDOT ENDLINE commandBlock

rule else:
	ELSE DOUBLEDOT ENDLINE commandBlock

rule ifstructure:
	if
	if else
	if elseif
	if elseif else

rule operation:
	{OPSUM OPSUBTRACT OPTIMES OPDIVIDE OPMODULE OPPOW}

rule print:
	PRINT text

rule parse:
	PARSE data

rule variable:
	identity
	identity EQUAL data
	type identity
	type identity EQUAL data

rule loop:
	FOR identity IN collection DOUBLEDOT ENDLINE commandBlock
	FOR type identity IN collection DOUBLEDOT ENDLINE commandBlock
	WHILE condition DOUBLEDOT ENDLINE commandBlock

rule throw:
	THROW identity

rule command:
	functionCall ENDLINE
	identity EQUAL data ENDLINE
	identity operation EQUAL data ENDLINE
	RETURN data ENDLINE
	print ENDLINE
	parse ENDLINE
	BREAK ENDLINE
	CONTINUE ENDLINE
	variable ENDLINE
	ifstructure
	throw
	loop

rule commandBlock:
	STARTBLOCK [command] ENDBLOCK

rule processingCommand inherits command:
	COMPLETE
	DISCARD
	APPEND text
	PREPEND text
	REPLACE text
	processing

rule processingCommandBlock:
	STARTBLOCK [processingCommand] ENDBLOCK

rule processing:
	PROCESSING ALL DOUBLEDOT ENDLINE processingCommandBlock
	PROCESSING LINE DOUBLEDOT ENDLINE processingCommandBlock
	PROCESSING CHARACTER DOUBLEDOT ENDLINE processingCommandBlock

rule key:
	{CONTEXTUAL IDENTITY} {KEY KEYWORD} ID {(EQUAL EXPRESSION)} ENDLINE

rule ruleelement:
	[{IDENTITY identity}] ENDLINE

rule rule:
	RULE identity DOUBLEDOT ENDLINE STARTBLOCK [ruleelement] ENDBLOCK
	RULE identity

rule startrule:
	START RULE DOUBLEDOT ENDLINE

rule reference:
	identity DOT reference
	identity

rule using:
	USING reference ENDLINE

rule include:
	INCLUDE reference ENDLINE

rule import:
	IMPORT reference ENDLINE

rule element:
	[{key rule startrule variable function using include import error}]

rule doctreevalue:
	OPEN data

rule paramcollection:
	variable COMMA paramcollection
	variable

rule lambda:
	LAMBDA data
	LAMBDA command

rule codedefinition:
	ENDLINE commandBlock
	lambda
	ENDLINE STARTBLOCK lambda ENDBLOCK

rule function:
	FUNCTION identity PARENTHESES PARENTHESES_CLOSE codedefinition
	FUNCTION identity PARENTHESES paramcollection PARENTHESES_CLOSE codedefinition
	FUNCTION type identity PARENTHESES PARENTHESES_CLOSE codedefinition
	FUNCTION type identity PARENTHESES paramcollection PARENTHESES_CLOSE codedefinition
	FUNCTION identity PARENTHESES PARENTHESES_CLOSE ENDLINE
	FUNCTION identity PARENTHESES paramcollection PARENTHESES_CLOSE ENDLINE
	FUNCTION type identity PARENTHESES PARENTHESES_CLOSE ENDLINE
	FUNCTION type identity PARENTHESES paramcollection PARENTHESES_CLOSE ENDLINE

rule error:
	ERROR identity

start rule:
	element {ENDFILE}

##########################################################################################################
###########################################  Error definition  ###########################################

error TabulationError